@{
    ViewData["Title"] = "Home Page";
}

@if (TempData["Succes"] != null)
{
    
        <div id="succ-msg" class="alert alert-success" role="alert">
            @TempData["Succes"]
        </div>

        <script>
            setTimeout(function () {
                var msg = document.getElementById("succ-msg");
                msg.parentNode.removeChild(msg);
            }, 1999);
        </script>
    
}

<html>
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <link rel="stylesheet" href="StyleHome.css" />
    <title>Home</title>
    <style>
        #home {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            font-family: 'Open Sans', sans-serif;
            background: #222;
            background-image: url('https://source.unsplash.com/1600x900/?landscape');
            font-size: 100%;
        }

        nav{
            background-color:pink;
        }

        .card {
            background: rgba(0, 0, 0, 0.30);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            backdrop-filter: blur(11.5px);
            -webkit-backdrop-filter: blur(11.5px);
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.18);
            color: white;
            padding: 2em;
            border-radius: 30px;
            width: 100%;
            max-width: 420px;
            margin: 1em;
            overflow: hidden;
            margin-left: 450px;
        }

        .search {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .btn2 {
            margin: 0.5em;
            border-radius: 50%;
            border: none;
            height: 44px;
            width: 44px;
            outline: none;
            background: rgba(255, 255, 255, 0.25);
            color: white;
            cursor: pointer;
            transition: 0.2s ease-in-out;
        }

        input.search-bar {
            border: none;
            outline: none;
            padding: 0.4em 1em;
            border-radius: 24px;
            background: rgba(0, 0, 0, 0.30);
            color: white;
            font-family: inherit;
            font-size: 105%;
            width: calc(100% - 100px);
        }

        .btn2:hover {
            background: #7c7c7c6b;
        }

        h1.temp {
            margin: 0;
            margin-bottom: 0.4em;
        }

        .flex {
            display: flex;
            align-items: center;
        }

        .description {
            text-transform: capitalize;
            margin-left: 8px;
        }

        .weather.loading {
            visibility: hidden;
            max-height: 20px;
            position: relative;
        }

            .weather.loading:after {
                visibility: visible;
                content: "Loading...";
                color: white;
                position: absolute;
                top: 0;
                left: 20px;
            }

        .js-tilt-glare {
            border-radius: 10px;
        }

        .background-out {
            padding: 2px 5px;
            background-color: black;
        }

        .button-out {
            color: #8f0808;
            margin-left: 2%;
            background-color: beige;
            padding: 1px 4px;
            outline: 1px solid white;
            outline-offset: 1px;
        }

        .topnav {
            background-color: #333;
            overflow: hidden;
        }

            /* Style the links inside the navigation bar */
            .topnav a {
                float: left;
                color: #f2f2f2;
                text-align: center;
                padding: 14px 16px;
                text-decoration: none;
                font-size: 20px;
            }

                /* Change the color of links on hover */
                .topnav a:hover {
                    background-color: #ddd;
                    color: rgb(0, 0, 0);
                }

                /* Add a color to the active/current link */
                .topnav a.active {
                    background-color: #04AA6D;
                    color: white;
                }

        header {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 50px;
            background-color: #333;
            color: #fff;
        }

    </style>
</head>

<body id="home">
    
    <div>
        <div class="card">
            <div class="search">
                <input type="text" class="search-bar" placeholder="Search" />
                <button class="btn2">
                    <svg onClick={handleSubmitWeather}
                         stroke="currentColor"
                         fill="currentColor"
                         strokeWidth="0"
                         viewBox="0 0 1024 1024"
                         height="1.5em"
                         width="1.5em"
                         xmlns="http://www.w3.org/2000/svg">
                        <path d="M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0 0 11.6 0l43.6-43.5a8.2 8.2 0 0 0 0-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z"></path>
                    </svg>
                </button>
            </div>
            <div class="weather loading">
                <h2 class="city" onChange={changeTextInputs}>
                    Weather in Craiova
                </h2>
                <h1 class="temp" onChange={changeTextInputs}>
                    25.02°C
                </h1>
                <div class="flex">
                    <img src="https://openweathermap.org/img/wn/04n.png"
                         alt=""
                         class="icon" />
                    <div class="description" onChange={changeTextInputs}>
                        Cloudy
                    </div>
                </div>
                <div class="humidity" onChange={changeTextInputs}>
                    Humidity: 91%
                </div>
                <div class="wind" onChange={changeTextInputs}>
                    Wind speed: 63.05 km/h
                </div>
            </div>
        </div>
    </div>
    <script>
        let weather = {
            fetchWeather: function (city) {
                fetch(
                    "https://api.openweathermap.org/data/2.5/weather?q=" +
                    city +
                    "&units=metric&appid=fb4e3ecc9f1802a1ce53bdf3a25f52a7"
                )
                    .then((response) => {
                        if (!response.ok) {
                            alert("No weather found.");
                            throw new Error("No weather found.");
                        }
                        return response.json();
                    })
                    .then((data) => this.displayWeather(data));
            },
            displayWeather: function (data) {
                const { name } = data;
                const { icon, description } = data.weather[0];
                const { temp, humidity } = data.main;
                const { speed } = data.wind;
                if (document.querySelector(".city")) {
                    document.querySelector(".city").innerText = "Weather in " + name;
                }
                if (document.querySelector(".icon")) {
                    document.querySelector(".icon").src =
                        "https://openweathermap.org/img/wn/" + icon + ".png";
                }
                if (document.querySelector(".description"))
                    document.querySelector(".description").innerText = description;
                if (document.querySelector(".temp"))
                    document.querySelector(".temp").innerText = temp + " C";
                if (document.querySelector(".humidity"))
                    document.querySelector(".humidity").innerText =
                        "Humidity: " + humidity + "%";
                if (document.querySelector(".wind"))
                    document.querySelector(".wind").innerText =
                        "Wind speed: " + speed + " km/h";
                if (document.querySelector(".weather"))
                    document.querySelector(".weather").classList.remove("loading");
            },
            search: function () {
                this.fetchWeather(document.querySelector(".search-bar").value);
            },
        };

        /* Fetching Data from OpenCageData Geocoder */
        let geocode = {
            reverseGeocode: function (latitude, longitude) {
                var apikey = "83fc4ef16ced428481bcfd58f324541f";

                var api_url = "https://api.opencagedata.com/geocode/v1/json";

                var request_url =
                    api_url +
                    "?" +
                    "key=" +
                    apikey +
                    "&q=" +
                    encodeURIComponent(latitude + "," + longitude) +
                    "&pretty=1" +
                    "&no_annotations=1";

                var request = new XMLHttpRequest();
                request.open("GET", request_url, true);

                request.onload = function () {
                    if (request.status === 200) {
                        var data = JSON.parse(request.responseText);
                        if (data.results[0].components.village) {
                            weather.fetchWeather(data.results[0].components.village);
                            console.log(data.results[0].components.village);
                        } else {
                            weather.fetchWeather(data.results[0].components.city);
                            console.log(data.results[0].components.city);
                        }
                    } else if (request.status <= 500) {
                        console.log("unable to geocode! Response code: " + request.status);
                        var data = JSON.parse(request.responseText);
                        console.log("error msg: " + data.status.message);
                    } else {
                        console.log("server error");
                    }
                };

                request.onerror = function () {
                    console.log("unable to connect to server");
                };

                request.send();
            },
            getLocation: function () {
                function success(data) {
                    geocode.reverseGeocode(data.coords.latitude, data.coords.longitude);
                }
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(success, console.error);
                } else {
                    weather.fetchWeather("Craiova");
                }
            },
        };
        window.onload = function () {

            document
                .querySelector(".search button")
                .addEventListener("click", function () {
                    weather.search();
                });

            document
                .querySelector(".search-bar")
                .addEventListener("keyup", function (event) {
                    if (event.key === "Enter") {
                        weather.search();
                    }
                });

        }
        weather.fetchWeather("Craiova");

        geocode.getLocation();



    </script>
</body>
</html>

